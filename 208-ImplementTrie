// #Question and Response
//A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and 
// retrieve keys in a dataset of strings. There are various applications of this data structure, 
// such as autocomplete and spellchecker.
// Implement the Trie class:
// Trie() Initializes the trie object.
// void insert(String word) Inserts the string word into the trie.
// boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), 
// and false otherwise.
// boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

class TrieNode {
    public:
        bool ends_here;
        char val;
        TrieNode* child[26];

        TrieNode(char val){
            val = val;
            ends_here = false;
            for(int i=0;i<26;i++) child[i] = NULL;
        }
};

class Trie {
    TrieNode* root;
public:
    Trie() {
        root = new TrieNode('/');
    }
    
    void insert(string word) {
        TrieNode* start = root;
        for(int i=0;i<word.size();i++){
            int ind = word[i]-'a';
            if(!start->child[ind]){
                start->child[ind] = new TrieNode(ind);
            }
            start = start->child[ind];
        }
        start->ends_here = true;
    }
    
    bool search(string word) {
        TrieNode* start = root;
        for(int i=0;i<word.size();i++){
            int ind = word[i]-'a';
            if(!start->child[ind]) return false;
            start = start->child[ind];
        }
        if(start->ends_here == true) return true;
        return false;
    }
    
    bool startsWith(string prefix) {
        TrieNode* start = root;
        for(int i=0;i<prefix.size();i++){
            int ind = prefix[i]-'a';
            if(!start->child[ind]) return false;
            start = start->child[ind];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

// #Input
// ["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
// [[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
// #Output
// [null, null, true, false, true, null, true]