// #Question and Response
// Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], 
// return the minimum number of conference rooms required.

class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        priority_queue<int, vector<int>, greater<int>> pq;
        int minRooms = INT_MIN;
        sort(intervals.begin(), intervals.end());
        for(int i=0;i<intervals.size();i++){
            minRooms = max(minRooms, (int) pq.size());
            if(pq.size() == 0){
                pq.push(intervals[i][1]);
            }else{
                while(true){
                    if(pq.size() > 0 and pq.top() <= intervals[i][0]) pq.pop();
                    else{
                        pq.push(intervals[i][1]);
                        break;
                    }
                }
            }
        }
        minRooms = max(minRooms, (int) pq.size());
        return minRooms;
    }
};

// #Input
// intervals = [[0,30],[5,10],[15,20]]
// #Output
// 2