// #Question and Response
// You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] 
// represent the start and the end of the ith interval and intervals is sorted in ascending order by 
// starti. You are also given an interval newInterval = [start, end] that represents the start and end
// of another interval.
// Insert newInterval into intervals such that intervals is still sorted in ascending order by starti 
// and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
// Return intervals after the insertion.
// Note that you don't need to modify intervals in-place. You can make a new array and return it.

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        intervals.push_back(newInterval);
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> result;
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            vector<int> lastInterval = result.back();
            if(intervals[i][0] > lastInterval[1]){
                result.push_back(intervals[i]);
            }else{
                lastInterval[0] = min(lastInterval[0], intervals[i][0]);
                lastInterval[1] = max(lastInterval[1], intervals[i][1]);
                result.back() = lastInterval;
            }
        }
        return result;
    }
};

// #Input
// intervals = [[1,3],[6,9]], newInterval = [2,5]
// #Output
// [[1,5],[6,9]]