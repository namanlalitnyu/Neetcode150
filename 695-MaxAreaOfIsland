// #Question and Response
// You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
// The area of an island is the number of cells with a value 1 in the island.
// Return the maximum area of an island in grid. If there is no island, return 0.

class Solution {
public:
    vector<pair<int, int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
    void dfs(vector<vector<int>>& grid, int i, int j, int r, int c, int& area){
        if(i < 0 or i>=r or j<0 or j>=c or grid[i][j]==0) return;
        grid[i][j] = 0;
        area = area + 1;
        for(int k=0;k<4;k++){
            int x = dir[k].first + i;
            int y = dir[k].second + j;
            dfs(grid, x, y, r, c, area);
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
       int area = 0, maxArea = 0, r = grid.size(), c = grid[0].size();
       for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if(grid[i][j] == 1){
                area = 0;
                dfs(grid, i, j, r, c, area);
                maxArea = max(maxArea, area);
            }
        }
       }
       return maxArea; 
    }
};

// #Input
// grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],
// [0,0,0,0,0,0,0,1,1,1,0,0,0],
// [0,1,1,0,1,0,0,0,0,0,0,0,0],
// [0,1,0,0,1,1,0,0,1,0,1,0,0],
// [0,1,0,0,1,1,0,0,1,1,1,0,0],
// [0,0,0,0,0,0,0,0,0,0,1,0,0],
// [0,0,0,0,0,0,0,1,1,1,0,0,0],
// [0,0,0,0,0,0,0,1,1,0,0,0,0]]
// #Output
// 6
