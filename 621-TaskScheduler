// #Question and Response
// You are given an array of CPU tasks, each represented by letters A to Z, and a cooling time, n. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: identical tasks must be separated by at least n intervals due to cooling time.
// â€‹Return the minimum number of intervals required to complete all tasks.

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> mapping(26,0);
        int freq = 0;
        for(char c: tasks) mapping[c-'A']++;
        int maxCount = *max_element(mapping.begin(), mapping.end());
        for(int x: mapping) if(x == maxCount) freq++;
        return max(freq + (maxCount-1)*(n+1), (int) tasks.size());
    }
};

// #Input
// tasks = ["A","A","A","B","B","B"], n = 2
// #Output
// 8
