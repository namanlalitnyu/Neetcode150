// # Question
// Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order,
// find two numbers such that they add up to a specific target number. 
// Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

// # Return
// Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int start = 0, end = numbers.size()-1;
        while(start < end){
            if(numbers[start] + numbers[end] == target) return {start + 1, end + 1};
            else if(numbers[start] + numbers[end] > target) end--;
            else start++;
        }
        return {};
    }
};

// ## Sample Input:
// numbers: [2,7,11,15]
// target: 9
//
// ## Expected Output:
// [1,2]