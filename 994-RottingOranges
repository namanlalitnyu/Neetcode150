// #Question and Response
// You are given an m x n grid where each cell can have one of three values:
// 0 representing an empty cell,
// 1 representing a fresh orange, or
// 2 representing a rotten orange.
// Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
// Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), minTime = 0;
        vector<pair<int,int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 2){
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()){
            int sz = q.size();
            minTime++;
            while(sz--){
                pair<int,int> tp = q.front();
                q.pop();
                for(int k=0;k<4;k++){
                    int x = dir[k].first + tp.first;
                    int y = dir[k].second + tp.second;
                    if(x >=0 and x <m and y>=0 and y<n and grid[x][y]==1){
                        grid[x][y] = 2;
                        q.push({x,y});
                    }
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) return -1;
            }
        }
        return minTime == 0 ? 0: minTime-1;
    }
};

// #Input
// grid = [[2,1,1],[1,1,0],[0,1,1]]
// #Output
// 4
