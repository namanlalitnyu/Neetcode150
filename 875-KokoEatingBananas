// # Question and Return 
// Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. 
// The guards have gone and will come back in h hours.
// Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of 
// bananas and eats k bananas from that pile. If the pile has less than k bananas, 
// she eats all of them instead and will not eat any more bananas during this hour.
// Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
// Return the minimum integer k such that she can eat all the bananas within h hours.

class Solution {
public:
    long long findK(vector<int> piles, int val){
        long long count = 0;
        for(int i=0;i<piles.size();i++){
            count+= (piles[i]/val);
            count+= (piles[i]%val) > 0 ? 1: 0;
        }
        return count;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        sort(piles.begin(), piles.end());
        int maxVal = piles[piles.size()-1], minVal = 1;
        while(minVal <= maxVal){
            int mid = minVal + (maxVal-minVal)/2;
            long long count = findK(piles, mid);
            if(count <= h) maxVal = mid-1;
            else minVal = mid+1;
        }
        return minVal;
    }
};

// ## Sample Input:
// piles = [3,6,7,11]
// h = 8
//
// ## Expected Output:
// 4