// # Question
// Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

// # Return
// Return all the possible combinations of the parenthesis.

class Solution {
public:
    void dfs(int open, int close, string s, int n, vector<string>& result){
        if(open == close and (open + close) == 2*n){
            result.push_back(s);
            return;
        }
        if(open < n){
            dfs(open + 1, close, s + "(", n, result);
        }
        if(close < open){
            dfs(open, close + 1, s + ")", n, result);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        int open = 0, close = 0;
        string s;
        dfs(open, close, s, n, result);
        return result;
    }
};

// ## Sample Input:
// n = 3
//
// ## Expected Output:
// ["((()))","(()())","(())()","()(())","()()()"]