// #Question and Response
// You are given two non-empty linked lists representing two non-negative integers. 
// The digits are stored in reverse order, and each of their nodes contains a single digit. 
// Add the two numbers and return the sum as a linked list.
// You may assume the two numbers do not contain any leading zero, except the number 0 itse

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode(-1);
        ListNode* head = result;
        int carry = 0;
        if(!l1 and !l2) return head->next;
        while(l1 or l2){
            if(!l1){
                result->next = new ListNode((l2->val + carry)%10);
                carry = (l2->val + carry)/10;
                result = result->next;
                l2 = l2->next;
            }
            else if(!l2){
                result->next = new ListNode((l1->val + carry)%10);
                carry = (l1->val + carry)/10;
                result = result->next;
                l1 = l1->next;
            }
            else{
                result->next = new ListNode((l1->val + l2->val + carry)%10);
                carry = (l1->val + l2->val + carry)/10;
                result = result->next;
                l1 = l1->next;
                l2 = l2->next;
            }
        }
        if(carry > 0){
            result->next = new ListNode(carry);
            result = result->next;
        }
        return head->next;
    }
};

// #Input
// l1 = [2,4,3], l2 = [5,6,4]
// #Output
// [7,0,8]