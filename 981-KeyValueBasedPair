// # Question and Return value
// Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.
// Implement the TimeMap class:
// TimeMap() Initializes the object of the data structure.
// void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
// String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".

class TimeMap {
public:
    TimeMap() {
        
    }
    unordered_map<string, vector<pair<int, string>>> mp;

    string find_value(string key, int timestamp){
        int start = 0, end = mp[key].size()-1;
        int maxTime = INT_MIN, ind = -1;
        while(start <= end){
            int mid = (start+end)/2;
            if(mp[key][mid].first <= timestamp){
                maxTime = max(maxTime, mp[key][mid].first);
                ind = mid;
                start = mid+1;
            }else{
                end = mid - 1;
            }
        }
        if(maxTime == INT_MIN) return "";
        else return mp[key][ind].second;
    }
    
    void set(string key, string value, int timestamp) {
        mp[key].push_back({timestamp, value});
    }
    
    string get(string key, int timestamp) {
        if(mp.find(key) == mp.end()) return "";
        return find_value(key, timestamp);
    }
};

// ## Sample Input:
// Input format = ["TimeMap","set","get","get","set","get","get"]
// Timestamps = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
//
// ## Expected Output:
// [null, null, "bar", "bar", null, "bar2", "bar2"]

