// #Question and Response
// Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
// and return an array of the non-overlapping intervals that cover all the intervals in the input.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> result;
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            vector<int> last = result.back();
            if(intervals[i][0] <= last[1]){
                last[0] = min(intervals[i][0], last[0]);
                last[1] = max(intervals[i][1], last[1]);
                result.back() = last;
            }else{
                result.push_back(intervals[i]);
            }
        }
        return result;
    }
};

// #Input
// intervals = [[1,3],[2,6],[8,10],[15,18]]
// #Output
// [[1,6],[8,10],[15,18]]