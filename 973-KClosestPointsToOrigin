// #Question and Response
// Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
// The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
// You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> result;
        priority_queue<pair<double, vector<int>>, vector<pair<double, vector<int>>>, greater<pair<double, vector<int>>> > pq;
        for(vector<int> v: points){
            double dist = sqrt(v[0]*v[0] + v[1]*v[1]);
            pq.push({dist, v});
        }
        for(int i=0;i<k;i++){
            auto val = pq.top();
            pq.pop();
            result.push_back(val.second);
        }
        return result;
    }
};

// #Input
// points = [[3,3],[5,-1],[-2,4]], k = 2
// #Output
// [[3,3],[-2,4]]
