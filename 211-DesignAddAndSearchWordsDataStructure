// #Question and Response
// Design a data structure that supports adding new words and finding if a string matches any previously added string.
// Implement the WordDictionary class:
// WordDictionary() Initializes the object.
// void addWord(word) Adds word to the data structure, it can be matched later.
// bool search(word) Returns true if there is any string in the data structure that matches word or 
// false otherwise. word may contain dots '.' where dots can be matched with any letter.

class WordDictionary {
    struct TrieNode{
        char val;
        int ends;
        TrieNode *child[26];
    };
    TrieNode *root;
    TrieNode *getNode(int index){
        TrieNode* node = new TrieNode;
        node -> val = 'a' + index;
        node->ends = 0;
        for(int i=0;i<26;i++){
            node->child[i] = NULL;
        }
        return node;
    }
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        root = getNode('/'-'a');
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode *curr = root;
        int index;
        for(int i=0;i<word.size();i++){
            index = word[i] - 'a';
            if(curr->child[index]==NULL){
                curr->child[index] = getNode(index);
            }
            curr = curr->child[index];
        }
        curr->ends +=1;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return search(word.c_str(), root);
    }
private:
    
    bool search(const char* word, TrieNode* node) {
        for (int i = 0; word[i] && node; i++) {
            if (word[i] != '.') {
                node = node -> child[word[i] - 'a'];
            } else {
                TrieNode* tmp = node;
                for (int j = 0; j < 26; j++) {
                    node = tmp -> child[j];
                    if (search(word + i + 1, node)) {
                        return true;
                    }
                }
            }
        }
        return node && (node -> ends > 0);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */

// #Input
// ["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
// [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
// #Output
// [null,null,null,null,false,true,true,true]