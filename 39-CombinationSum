// #Question and Response
// Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
// The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
// frequency of at least one of the chosen numbers is different.

class Solution {
public:
    vector<vector<int>> result;
    void dfs(int currSum, int index, vector<int> candidates, int target, vector<int> currVec){
        if(index >= candidates.size()) return;
        if(currSum > target) return;
        if(currSum == target){
            result.push_back(currVec);
            return;
        }
        for(int i=index;i<candidates.size();i++){
            currVec.push_back(candidates[i]);
            dfs(currSum + candidates[i], i, candidates, target, currVec);
            currVec.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        dfs(0, 0, candidates, target, {});
        return result;
    }
};

// #Input
// candidates = [2,3,6,7], target = 7
// #Output
// [[2,2,3],[7]]