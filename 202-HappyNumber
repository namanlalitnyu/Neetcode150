// #Question and Response
// Write an algorithm to determine if a number n is happy.
// A happy number is a number defined by the following process:
// Starting with any positive integer, replace the number by the sum of the squares of its digits.
// Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
// Those numbers for which this process ends in 1 are happy.
// Return true if n is a happy number, and false if not.


class Solution {
public:
    int sum(int n){
        string s = to_string(n);
        int ans = 0;
        for(int i=0;i<s.size();i++){
            ans += ((s[i]-'0') * (s[i]-'0'));
        }
        return ans;
    }
    bool isHappy(int n) {
        int temp = n, flag=0;
        set<int> st;
        while(1){
            if(temp == 1) return true;
            int ans = sum(temp);
            if(st.find(ans)!=st.end()) return false;
            st.insert(ans);
            temp = ans;
        }
        return false;
    }
};

// #Input
// n = 19
// #Output
// true
